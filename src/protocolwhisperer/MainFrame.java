/*
 * Copyright 2020 Matt Jamesson <scifidryer@gmail.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package protocolwhisperer;
import protocolwhisperer.drivers.ModbusProtocolHandler;
import javax.swing.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.io.*;
import javax.swing.filechooser.*;
import java.beans.*;

/**
 *
 * @author Matt Jamesson <scifidryer@gmail.com>
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form BridgeFrame
     */
    BridgeManager manager = null;
    JComboBox incomingDataSelector = null;
    JComboBox outgoingDataSelector = null;
    public MainFrame(BridgeManager aManager) {
        manager = aManager;
        initComponents();
        incomingDataSelector = new JComboBox();
        outgoingDataSelector = new JComboBox();
        incomingDataSelectorPane.add(incomingDataSelector);
        outgoingDataSelectorPane.add(outgoingDataSelector);
        protocolwhisperer.drivers.DriverMenuHandler dmh = new protocolwhisperer.drivers.DriverMenuHandler(incomingDataSelector, outgoingDataSelector, this, incomingDataPane, outgoingDataPane);
        manager.dmh = dmh;
    }
    public MainFrame()
    {
    }
    public void setManager(BridgeManager aManager)
    {
        manager = aManager;
    }
    public BridgeManager getManager()
    {
        return manager;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        generalPane = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        startBridgeButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        restIntervalField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        incomingTabPane = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        incomingDataSelectorPane = new javax.swing.JPanel();
        addDataSource = new javax.swing.JButton();
        incomingDataParent = new javax.swing.JPanel();
        incomingDataPane = new javax.swing.JPanel();
        topAlignmentSpace = new javax.swing.JPanel();
        outgoingTabPane = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        outgoingDataPaneParent = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        outgoingDataSelectorPane = new javax.swing.JPanel();
        addDataDestination = new javax.swing.JButton();
        outgoingDataPane = new javax.swing.JPanel();
        viewSourcesPane = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        valuesTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        saveConfig = new javax.swing.JMenuItem();
        loadConfig = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        generalPane.setLayout(new javax.swing.BoxLayout(generalPane, javax.swing.BoxLayout.Y_AXIS));

        jPanel1.add(jSeparator1);

        startBridgeButton.setText("Start Bridge");
        startBridgeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBridgeButtonActionPerformed(evt);
            }
        });
        jPanel1.add(startBridgeButton);

        generalPane.add(jPanel1);

        jLabel2.setText("Rest interval");
        jPanel3.add(jLabel2);

        restIntervalField.setColumns(4);
        restIntervalField.setText("1000");
        jPanel3.add(restIntervalField);

        jLabel1.setText("ms");
        jPanel3.add(jLabel1);

        generalPane.add(jPanel3);

        jTabbedPane1.addTab("General", generalPane);

        incomingTabPane.setLayout(new javax.swing.BoxLayout(incomingTabPane, javax.swing.BoxLayout.Y_AXIS));

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));

        jLabel3.setText("Driver");
        jPanel4.add(jLabel3);
        jPanel4.add(incomingDataSelectorPane);

        addDataSource.setText("Add");
        addDataSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDataSourceActionPerformed(evt);
            }
        });
        jPanel4.add(addDataSource);

        jPanel2.add(jPanel4);

        incomingDataParent.setLayout(new javax.swing.BoxLayout(incomingDataParent, javax.swing.BoxLayout.Y_AXIS));

        incomingDataPane.setLayout(new javax.swing.BoxLayout(incomingDataPane, javax.swing.BoxLayout.Y_AXIS));
        incomingDataParent.add(incomingDataPane);

        topAlignmentSpace.setLayout(new java.awt.BorderLayout());
        incomingDataParent.add(topAlignmentSpace);

        jPanel2.add(incomingDataParent);

        jScrollPane1.setViewportView(jPanel2);

        incomingTabPane.add(jScrollPane1);

        jTabbedPane1.addTab("Data Sources", incomingTabPane);

        outgoingTabPane.setLayout(new javax.swing.BoxLayout(outgoingTabPane, javax.swing.BoxLayout.LINE_AXIS));

        outgoingDataPaneParent.setLayout(new javax.swing.BoxLayout(outgoingDataPaneParent, javax.swing.BoxLayout.Y_AXIS));

        jLabel4.setText("Driver");
        jPanel5.add(jLabel4);
        jPanel5.add(outgoingDataSelectorPane);

        addDataDestination.setText("Add");
        addDataDestination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDataDestinationActionPerformed(evt);
            }
        });
        jPanel5.add(addDataDestination);

        outgoingDataPaneParent.add(jPanel5);

        outgoingDataPane.setLayout(new javax.swing.BoxLayout(outgoingDataPane, javax.swing.BoxLayout.Y_AXIS));
        outgoingDataPaneParent.add(outgoingDataPane);

        jScrollPane2.setViewportView(outgoingDataPaneParent);

        outgoingTabPane.add(jScrollPane2);

        jTabbedPane1.addTab("Data Destinations", outgoingTabPane);

        valuesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tag", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(valuesTable);

        viewSourcesPane.add(jScrollPane3);

        jTabbedPane1.addTab("View Source Values", viewSourcesPane);

        getContentPane().add(jTabbedPane1);

        jMenu1.setText("File");

        saveConfig.setText("Save config to file");
        saveConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveConfigActionPerformed(evt);
            }
        });
        jMenu1.add(saveConfig);

        loadConfig.setText("Load config from file");
        loadConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadConfigActionPerformed(evt);
            }
        });
        jMenu1.add(loadConfig);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        setBounds(0, 0, 838, 339);
    }// </editor-fold>//GEN-END:initComponents

    public void addMapping()
    {
        JPanel mainPanel = new JPanel();
        JPanel incomingPanel = new JPanel();
        JPanel incomingDataSettings = new JPanel();
        JPanel outgoingPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.X_AXIS));
        
        incomingPanel.setLayout(new BoxLayout(incomingPanel, BoxLayout.Y_AXIS));
        
        
        
        
        JPanel incomingDataSource = new JPanel();
        
        incomingDataSettings.setLayout(new BoxLayout(incomingDataSettings, BoxLayout.Y_AXIS));
        
        JLabel incomingDataLabel = new JLabel("Incoming Data Source");
        incomingDataSource.add(incomingDataLabel);
        //incomingDataSource.add(incomingDataSelector);
        incomingPanel.add(incomingDataSource);
        incomingPanel.add(incomingDataSettings);
        
        outgoingPanel.setLayout(new BoxLayout(outgoingPanel, BoxLayout.Y_AXIS));
        
        //entryContainer.incomingSettings.get(0).add(incomingDataSelector);
        
        
        //manager.bridgeMapList.add(entryContainer);
        
        
        
        mainPanel.add(incomingPanel);
        mainPanel.add(new JSeparator(JSeparator.VERTICAL));
        mainPanel.add(outgoingPanel);
        mainPanel.add(new JSeparator(JSeparator.VERTICAL));
        JButton deleteButton = new JButton("Delete mapping");
        mainPanel.add(deleteButton);
        deleteButton.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e)
            {
                incomingTabPane.remove(mainPanel);
                //manager.bridgeMapList.remove(entryContainer);
                pack();
            }
        });
        incomingTabPane.add(mainPanel);
        pack();
    }
    private void startBridgeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBridgeButtonActionPerformed
        if (!manager.isRunning)
        {
            try
            {
                manager.restTime = Integer.parseInt(restIntervalField.getText());
            }
            catch (Exception e)
            {
                if (ProtocolWhisperer.debug)
                {
                    e.printStackTrace();
                }
                manager.restTime = 1000;
            }
            manager.constructSettingsFromGui();
            manager.startBridge();
            startBridgeButton.setText("Stop bridge");
        }
        else
        {
            manager.shutdown();
            startBridgeButton.setText("Start bridge");
        }
    }//GEN-LAST:event_startBridgeButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (manager.isRunning)
        {
            manager.shutdown();
        }
    }//GEN-LAST:event_formWindowClosing

    private void saveConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveConfigActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("CFG file", "cfg");
        chooser.setFileFilter(filter);
        int status = chooser.showSaveDialog(this);
        if (status == JFileChooser.APPROVE_OPTION)
        {
            java.io.File f = chooser.getSelectedFile();
            String filename = f.getName();
            if (filename.length() > 4 && !filename.substring(filename.length()-4).equalsIgnoreCase(".cfg"))
            {
                f = new File(f.getParent() + File.separator + f.getName() + ".cfg");
            }
            try
            {
                XMLEncoder xmle = new XMLEncoder(new FileOutputStream(f));
                manager.constructSettingsFromGui();
                xmle.writeObject(manager.dataSourceRecords);
                xmle.close();
            }
            catch (Exception e)
            {
                if (ProtocolWhisperer.debug)
                {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_saveConfigActionPerformed

    private void loadConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadConfigActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("CFG file", "cfg");
        chooser.setFileFilter(filter);
        int status = chooser.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION)
        {
            java.io.File f = chooser.getSelectedFile();
            String filename = f.getName();
            if (filename.length() > 4 && !filename.substring(filename.length()-4).equalsIgnoreCase(".cfg"))
            {
                f = new File(f.getParent() + File.separator + f.getName() + ".cfg");
            }
            try
            {
                XMLDecoder xmld = new XMLDecoder(new FileInputStream(f));
                manager.dataSourceRecords = (ArrayList<protocolwhisperer.drivers.ProtocolRecord>)xmld.readObject();
                xmld.close();
                manager.restoreGuiFromFile();
            }
            catch (Exception e)
            {
                if (ProtocolWhisperer.debug)
                {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_loadConfigActionPerformed

    private void addDataSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDataSourceActionPerformed
        manager.dmh.dispatchDriverEvent(protocolwhisperer.drivers.ProtocolHandler.PANE_TYPE_INCOMING, incomingDataSelector.getSelectedItem().toString());
    }//GEN-LAST:event_addDataSourceActionPerformed

    private void addDataDestinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDataDestinationActionPerformed
        manager.dmh.dispatchDriverEvent(protocolwhisperer.drivers.ProtocolHandler.PANE_TYPE_OUTGOING, outgoingDataSelector.getSelectedItem().toString());
    }//GEN-LAST:event_addDataDestinationActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDataDestination;
    private javax.swing.JButton addDataSource;
    private javax.swing.JPanel generalPane;
    private javax.swing.JPanel incomingDataPane;
    private javax.swing.JPanel incomingDataParent;
    private javax.swing.JPanel incomingDataSelectorPane;
    private javax.swing.JPanel incomingTabPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuItem loadConfig;
    private javax.swing.JPanel outgoingDataPane;
    private javax.swing.JPanel outgoingDataPaneParent;
    private javax.swing.JPanel outgoingDataSelectorPane;
    private javax.swing.JPanel outgoingTabPane;
    private javax.swing.JTextField restIntervalField;
    private javax.swing.JMenuItem saveConfig;
    private javax.swing.JButton startBridgeButton;
    private javax.swing.JPanel topAlignmentSpace;
    public javax.swing.JTable valuesTable;
    private javax.swing.JPanel viewSourcesPane;
    // End of variables declaration//GEN-END:variables
}
