/*
 * Copyright 2021 Matt Jamesson <scifidryer@gmail.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package protocolwhisperer.drivers;
import javax.swing.*;
/**
 *
 * @author Matt Jamesson <scifidryer@gmail.com>
 */
public class ModbusConfigFrame extends javax.swing.JFrame {

    /**
     * Creates new form ModbusConfigFrame
     */
    static String[] dataTypeMenuNames = new String[] {"Select data type", "Float", "Unsigned Int16", "Unsigned Int32"};
    ModbusProtocolRecord currentRecord = null;
    public ModbusConfigFrame(ModbusProtocolRecord aCurrentRecord) {
        initComponents();
        currentRecord = aCurrentRecord;
        dataTypeSelector.setModel(new DefaultComboBoxModel(dataTypeMenuNames));
        if (currentRecord.protocolType == ModbusProtocolRecord.PROTOCOL_TYPE_SLAVE)
        {
            hostIpField.setVisible(false);
            hostIpLabel.setVisible(false);
        }
        if (currentRecord.configured)
        {
            if (currentRecord.protocolType == ModbusProtocolRecord.PROTOCOL_TYPE_MASTER)
            {
                hostIpField.setText(currentRecord.slaveHost);
            }
            portField.setText(currentRecord.slavePort + "");
            idField.setText(currentRecord.node + "");
            if (currentRecord.functionCode == 3)
            {
                registerTypeSelector.setSelectedIndex(1);
            }
            if (currentRecord.functionCode == 4)
            {
                registerTypeSelector.setSelectedIndex(2);
            }
            registerField.setText(currentRecord.startingRegister + "");
            dataTypeSelector.setSelectedItem(ModbusProtocolHandler.getMenuItemFromFormat(currentRecord.formatType));
            wordSwapCheckbox.setSelected(currentRecord.wordSwap);
            byteSwapCheckbox.setSelected(currentRecord.byteSwap);
        }
        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        hostIpLabel = new javax.swing.JLabel();
        hostIpField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        portField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        registerTypeSelector = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        registerField = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        dataTypeSelector = new javax.swing.JComboBox<>();
        wordSwapCheckbox = new javax.swing.JCheckBox();
        byteSwapCheckbox = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Modbus Config");
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        hostIpLabel.setText("Host IP:");
        jPanel1.add(hostIpLabel);

        hostIpField.setColumns(10);
        hostIpField.setToolTipText("");
        jPanel1.add(hostIpField);

        jLabel2.setText("Port:");
        jPanel1.add(jLabel2);

        portField.setColumns(3);
        portField.setText("502");
        portField.setToolTipText("");
        jPanel1.add(portField);

        jLabel3.setText("ID:");
        jPanel1.add(jLabel3);

        idField.setColumns(3);
        idField.setText("1");
        idField.setToolTipText("");
        jPanel1.add(idField);

        getContentPane().add(jPanel1);

        registerTypeSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Register Type", "Holding Registers", "Input Registers" }));
        jPanel2.add(registerTypeSelector);

        jLabel4.setText("Register:");
        jPanel2.add(jLabel4);

        registerField.setColumns(4);
        registerField.setToolTipText("");
        registerField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerFieldActionPerformed(evt);
            }
        });
        jPanel2.add(registerField);

        getContentPane().add(jPanel2);

        dataTypeSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataTypeSelectorActionPerformed(evt);
            }
        });
        jPanel4.add(dataTypeSelector);

        wordSwapCheckbox.setText("Word Swap");
        wordSwapCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wordSwapCheckboxActionPerformed(evt);
            }
        });
        jPanel4.add(wordSwapCheckbox);

        byteSwapCheckbox.setText("Byte Swap");
        jPanel4.add(byteSwapCheckbox);

        getContentPane().add(jPanel4);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        jPanel3.add(okButton);

        getContentPane().add(jPanel3);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void registerFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_registerFieldActionPerformed

    private void dataTypeSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataTypeSelectorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dataTypeSelectorActionPerformed

    private void wordSwapCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wordSwapCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wordSwapCheckboxActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        currentRecord.slaveHost = hostIpField.getText();
        currentRecord.slavePort = Integer.parseInt(portField.getText());
        currentRecord.node = Integer.parseInt(idField.getText());
        if (registerTypeSelector.getSelectedIndex() == 1)
        {
            currentRecord.functionCode = 3;
        }
        if (registerTypeSelector.getSelectedIndex() == 2)
        {
            currentRecord.functionCode = 4;
        }
        currentRecord.startingRegister = Integer.parseInt(registerField.getText());
        currentRecord.formatType = ModbusProtocolHandler.getFormatFromMenuItem(dataTypeSelector.getSelectedItem().toString());
        currentRecord.quantity = 2;
        if (currentRecord.formatType == ModbusProtocolRecord.FORMAT_TYPE_UINT_16)
        {
            currentRecord.quantity = 1;
        }
        currentRecord.byteSwap = byteSwapCheckbox.isSelected();
        currentRecord.wordSwap = wordSwapCheckbox.isSelected();
        currentRecord.configured = true;
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox byteSwapCheckbox;
    private javax.swing.JComboBox<String> dataTypeSelector;
    private javax.swing.JTextField hostIpField;
    private javax.swing.JLabel hostIpLabel;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField portField;
    private javax.swing.JTextField registerField;
    private javax.swing.JComboBox<String> registerTypeSelector;
    private javax.swing.JCheckBox wordSwapCheckbox;
    // End of variables declaration//GEN-END:variables
}
